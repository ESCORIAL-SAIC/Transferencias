name: Build MAUI APK with Versioning

on:
  push:
    branches:
      - ci-cd/setup
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build (prerelease or release)'
        required: true
        default: 'prerelease'

jobs:
  build:
    name: Build Signed MAUI APK and Release
    runs-on: windows-latest

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      # 1️⃣ Clonar repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2️⃣ Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 3️⃣ Instalar workloads MAUI
      - name: Install MAUI workload
        run: dotnet workload install maui
        shell: pwsh

      # 4️⃣ Restaurar keystore desde Base64
      - name: Decode keystore from base64
        run: |
          $keystorePath = Join-Path $PWD "my-release-key.keystore"
          [System.IO.File]::WriteAllBytes($keystorePath, [Convert]::FromBase64String("${{ secrets.ORG_ANDROID_KEYSTORE_BASE64 }}"))
          Write-Host "Keystore path: $keystorePath"
        shell: pwsh

        # 5️⃣ Incrementar versión en csproj
      - name: Increment Version in csproj
        id: versioning
        run: |
            $buildType = "${{ github.event.inputs.build_type }}"
            [xml]$csproj = Get-Content "Transferencias/Transferencias.csproj"
            
            # Obtener versión actual
            $version = $csproj.Project.PropertyGroup.ApplicationDisplayVersion
            if (-not $version) { $version = "0.1.0" }

            $parts = $version -split '\.'
            $major = [int]$parts[0]
            $minor = [int]$parts[1]
            $patch = [int]$parts[2]

            # Incrementar según tipo de build
            if ($buildType -eq "prerelease") {
                $minor += 1
            } elseif ($buildType -eq "release") {
                $major += 1
                $minor = 0
                $patch = 0
            }

            $newVersion = "$major.$minor.$patch"
            $csproj.Project.PropertyGroup.ApplicationDisplayVersion = $newVersion

            # NO TOCAR ApplicationVersion, que queda con timestamp
            $csproj.Save("Transferencias/Transferencias.csproj")
            
            Write-Host "New version: $newVersion"
            echo "version=$newVersion" >> $env:GITHUB_ENV
        shell: pwsh


      # 6️⃣ Build MAUI APK
      - name: Build MAUI APK Release
        run: |
          $keystorePath = Join-Path $PWD "my-release-key.keystore"
          $outputDir = Join-Path $PWD "output"
          dotnet publish "Transferencias/Transferencias.csproj" -f net8.0-android -c Release -o $outputDir /p:AndroidPackageFormat=apk /p:AndroidKeyStore=true /p:AndroidSigningKeyStore=$keystorePath /p:AndroidSigningKeyAlias="${{ secrets.ORG_ANDROID_KEY_ALIAS }}" /p:AndroidSigningKeyPass="${{ secrets.ORG_ANDROID_KEY_PASSWORD }}" /p:AndroidSigningStorePass="${{ secrets.ORG_ANDROID_KEYSTORE_PASSWORD }}" /p:PublishTrimmed=true /p:RunAOTCompilation=true /p:EmbedAssembliesIntoApk=true
          
          $apkPath = Get-ChildItem $outputDir -Filter *.apk | Select-Object -First 1
          echo "apk_path=$($apkPath.FullName)" >> $env:GITHUB_ENV
        shell: pwsh

      # 7️⃣ Commit & push tag
      - name: Commit & Tag version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Transferencias/Transferencias.csproj
          git commit -m "chore: bump version to ${{ env.version }}"
          git tag ${{ env.version }}
          git push origin HEAD --tags
        shell: pwsh

      # 8️⃣ Generar changelog
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9️⃣ Crear release en GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.version }}
          name: "Dev Release ${{ env.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          files: ${{ env.apk_path }}
          prerelease: ${{ github.event.inputs.build_type == 'prerelease' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
